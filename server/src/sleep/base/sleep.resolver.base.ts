/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSleepArgs } from "./CreateSleepArgs";
import { UpdateSleepArgs } from "./UpdateSleepArgs";
import { DeleteSleepArgs } from "./DeleteSleepArgs";
import { SleepFindManyArgs } from "./SleepFindManyArgs";
import { SleepFindUniqueArgs } from "./SleepFindUniqueArgs";
import { Sleep } from "./Sleep";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { SleepService } from "../sleep.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sleep)
export class SleepResolverBase {
  constructor(
    protected readonly service: SleepService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sleep",
    action: "read",
    possession: "any",
  })
  async _sleepsMeta(
    @graphql.Args() args: SleepFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sleep])
  @nestAccessControl.UseRoles({
    resource: "Sleep",
    action: "read",
    possession: "any",
  })
  async sleeps(@graphql.Args() args: SleepFindManyArgs): Promise<Sleep[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sleep, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sleep",
    action: "read",
    possession: "own",
  })
  async sleep(
    @graphql.Args() args: SleepFindUniqueArgs
  ): Promise<Sleep | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sleep)
  @nestAccessControl.UseRoles({
    resource: "Sleep",
    action: "create",
    possession: "any",
  })
  async createSleep(@graphql.Args() args: CreateSleepArgs): Promise<Sleep> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sleep)
  @nestAccessControl.UseRoles({
    resource: "Sleep",
    action: "update",
    possession: "any",
  })
  async updateSleep(
    @graphql.Args() args: UpdateSleepArgs
  ): Promise<Sleep | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sleep)
  @nestAccessControl.UseRoles({
    resource: "Sleep",
    action: "delete",
    possession: "any",
  })
  async deleteSleep(
    @graphql.Args() args: DeleteSleepArgs
  ): Promise<Sleep | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: Sleep,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
