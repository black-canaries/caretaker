/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateGlucoseArgs } from "./CreateGlucoseArgs";
import { UpdateGlucoseArgs } from "./UpdateGlucoseArgs";
import { DeleteGlucoseArgs } from "./DeleteGlucoseArgs";
import { GlucoseFindManyArgs } from "./GlucoseFindManyArgs";
import { GlucoseFindUniqueArgs } from "./GlucoseFindUniqueArgs";
import { Glucose } from "./Glucose";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { GlucoseService } from "../glucose.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Glucose)
export class GlucoseResolverBase {
  constructor(
    protected readonly service: GlucoseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Glucose",
    action: "read",
    possession: "any",
  })
  async _glucosesMeta(
    @graphql.Args() args: GlucoseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Glucose])
  @nestAccessControl.UseRoles({
    resource: "Glucose",
    action: "read",
    possession: "any",
  })
  async glucoses(
    @graphql.Args() args: GlucoseFindManyArgs
  ): Promise<Glucose[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Glucose, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Glucose",
    action: "read",
    possession: "own",
  })
  async glucose(
    @graphql.Args() args: GlucoseFindUniqueArgs
  ): Promise<Glucose | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Glucose)
  @nestAccessControl.UseRoles({
    resource: "Glucose",
    action: "create",
    possession: "any",
  })
  async createGlucose(
    @graphql.Args() args: CreateGlucoseArgs
  ): Promise<Glucose> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Glucose)
  @nestAccessControl.UseRoles({
    resource: "Glucose",
    action: "update",
    possession: "any",
  })
  async updateGlucose(
    @graphql.Args() args: UpdateGlucoseArgs
  ): Promise<Glucose | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Glucose)
  @nestAccessControl.UseRoles({
    resource: "Glucose",
    action: "delete",
    possession: "any",
  })
  async deleteGlucose(
    @graphql.Args() args: DeleteGlucoseArgs
  ): Promise<Glucose | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: Glucose,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
