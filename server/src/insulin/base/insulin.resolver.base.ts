/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateInsulinArgs } from "./CreateInsulinArgs";
import { UpdateInsulinArgs } from "./UpdateInsulinArgs";
import { DeleteInsulinArgs } from "./DeleteInsulinArgs";
import { InsulinFindManyArgs } from "./InsulinFindManyArgs";
import { InsulinFindUniqueArgs } from "./InsulinFindUniqueArgs";
import { Insulin } from "./Insulin";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { InsulinService } from "../insulin.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Insulin)
export class InsulinResolverBase {
  constructor(
    protected readonly service: InsulinService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Insulin",
    action: "read",
    possession: "any",
  })
  async _insulinsMeta(
    @graphql.Args() args: InsulinFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Insulin])
  @nestAccessControl.UseRoles({
    resource: "Insulin",
    action: "read",
    possession: "any",
  })
  async insulins(
    @graphql.Args() args: InsulinFindManyArgs
  ): Promise<Insulin[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Insulin, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Insulin",
    action: "read",
    possession: "own",
  })
  async insulin(
    @graphql.Args() args: InsulinFindUniqueArgs
  ): Promise<Insulin | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Insulin)
  @nestAccessControl.UseRoles({
    resource: "Insulin",
    action: "create",
    possession: "any",
  })
  async createInsulin(
    @graphql.Args() args: CreateInsulinArgs
  ): Promise<Insulin> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Insulin)
  @nestAccessControl.UseRoles({
    resource: "Insulin",
    action: "update",
    possession: "any",
  })
  async updateInsulin(
    @graphql.Args() args: UpdateInsulinArgs
  ): Promise<Insulin | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Insulin)
  @nestAccessControl.UseRoles({
    resource: "Insulin",
    action: "delete",
    possession: "any",
  })
  async deleteInsulin(
    @graphql.Args() args: DeleteInsulinArgs
  ): Promise<Insulin | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async resolveFieldUsers(
    @graphql.Parent() parent: Insulin,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
